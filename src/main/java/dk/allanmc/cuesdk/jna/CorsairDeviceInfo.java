package dk.allanmc.cuesdk.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * contains information about device<br>
 * <i>native declaration : target\CUESDK\include\CUESDK.h:72</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CorsairDeviceInfo extends Structure {
	/**
	 * @see CorsairDeviceType<br>
	 * enum describing device type<br>
	 * C type : CorsairDeviceType
	 */
	public int type;
	/**
	 * null - terminated device model(like \u201cK95RGB\u201d)<br>
	 * C type : const char*
	 */
	public Pointer model;
	/**
	 * @see CorsairPhysicalLayout<br>
	 * enum describing physical layout of the keyboard or mouse<br>
	 * C type : CorsairPhysicalLayout
	 */
	public int physicalLayout;
	/**
	 * @see CorsairLogicalLayout<br>
	 * enum describing logical layout of the keyboard as set in CUE settings<br>
	 * C type : CorsairLogicalLayout
	 */
	public int logicalLayout;
	/** mask that describes device capabilities, formed as logical \u201cor\u201d of CorsairDeviceCaps enum values */
	public int capsMask;
	/** number of controllable LEDs on the device */
	public int ledsCount;
	public CorsairDeviceInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("type", "model", "physicalLayout", "logicalLayout", "capsMask", "ledsCount");
	}
	/**
	 * @param type @see CorsairDeviceType<br>
	 * enum describing device type<br>
	 * C type : CorsairDeviceType<br>
	 * @param model null - terminated device model(like \u201cK95RGB\u201d)<br>
	 * C type : const char*<br>
	 * @param physicalLayout @see CorsairPhysicalLayout<br>
	 * enum describing physical layout of the keyboard or mouse<br>
	 * C type : CorsairPhysicalLayout<br>
	 * @param logicalLayout @see CorsairLogicalLayout<br>
	 * enum describing logical layout of the keyboard as set in CUE settings<br>
	 * C type : CorsairLogicalLayout<br>
	 * @param capsMask mask that describes device capabilities, formed as logical \u201cor\u201d of CorsairDeviceCaps enum values<br>
	 * @param ledsCount number of controllable LEDs on the device
	 */
	public CorsairDeviceInfo(int type, Pointer model, int physicalLayout, int logicalLayout, int capsMask, int ledsCount) {
		super();
		this.type = type;
		this.model = model;
		this.physicalLayout = physicalLayout;
		this.logicalLayout = logicalLayout;
		this.capsMask = capsMask;
		this.ledsCount = ledsCount;
	}
	public CorsairDeviceInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CorsairDeviceInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends CorsairDeviceInfo implements Structure.ByValue {
		
	};
}
